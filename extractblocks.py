#---------------------------------------------------------------------------------------------
# Description
# This script is used to extract the orthologous blocks according to these files
# 1) .bed 2) .anchors
#---------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------
# Code args
#---------------------------------------------------------------------------------------------
import argparse
parser = argparse.ArgumentParser()
parser.add_argument('-b1', "--species1", type=str, metavar='BED', required=True, help='Unique BED file of speciesA generated by JCVI')
parser.add_argument('-b2', "--species2", type=str, metavar='BED', required=True, help='Unique BED file of speciesB generated by JCVI')
parser.add_argument('-a', "--anchors", type=str, metavar='', required=True, help='.anchors file generated by JCVI')
parser.add_argument('-c1', "--chromosome1", type=str, metavar='', required=True, help='Set the one chromosome of speciesA')
parser.add_argument('-c2', "--chromosome2", type=str, metavar='', required=True, help='Set the another one chromosome of speciesA')
parser.add_argument('-c3', "--chromosome3", type=str, metavar='', required=True, help='Set the one chromosome of speciesB')
parser.add_argument('-o1', "--output1", type=str, metavar='', required=True, help='Set the output name of gene ID list of speciesA chromosome1')
parser.add_argument('-o2', "--output2", type=str, metavar='', required=True, help='Set the output name of gene ID list of speciesA chromosome2')
parser.add_argument('-o3', "--output3", type=str, metavar='', required=True, help='Set the output name of gene ID list of speciesB chromosome3')
args = parser.parse_args()

#---------------------------------------------------------------------------------------------
# Code
#---------------------------------------------------------------------------------------------
'''this function read the bed file and record the genename and its position using Python dictionary'''
def Getgenepos(bed):
    genepos_dict = {}
    pos_list = []
    gene_list = []
    with open(bed, 'rt') as input:
        for line in input:
            tmp_line = line.strip("\n").split("\t")
            # print(tmp_line)

            pos = tmp_line[0]
            gene = tmp_line[3]
            pos_list.append(pos)
            gene_list.append(gene)
        genepos_dict = dict(zip(gene_list, pos_list))
    input.close()
    return genepos_dict


# 后续修改成argparse调用
speciesA_genepos = Getgenepos(args.species1)
speciesB_genepos = Getgenepos(args.species2)


'''this function is used to extract the targeted ortholog, it read in the .anchors file'''
# 现在这边需要写一个草稿：dlaA1的chr1，Ped14，Ped16，还有其他几个亚基因组的几条序列都是需要提取的 —— 都进行一个交集提取
# 比如，dlaA1 chr1的同源基因集由Ped14和Ped16得到
# 【注意事项】目前还是只限定于2个物种
def GetOrtholog(anchors, para1, para2, para3):
    # anchors 代表输入的anchors文件
    # para1 代表物种1中一条染色体代号
    # para2 代表物种1中另一条染色体代号
    # para3 代表物种2中一条染色体代号
    filter_list1 = []
    filter_list2 = []
    filter_list3 = []

    with open(anchors, 'r') as input:
        for line in input:
            tmp_line = line.strip('\n').split('\t')
            if "#" in line:   # 过滤为#的行
                continue
            elif speciesA_genepos[tmp_line[0]] == para1 and speciesB_genepos[tmp_line[1]] == para3:
                filter_list1.append(tmp_line)
            elif speciesA_genepos[tmp_line[0]] == para2 and speciesB_genepos[tmp_line[1]] == para3:
                filter_list2.append(tmp_line)
            else:
                continue
        clist1 = [line[1] for line in filter_list1]
        clist2 = [line[1] for line in filter_list2]
        filter_list3 = list(set(clist1).union(set(clist2)))
    input.close()
    return filter_list1, filter_list2, filter_list3

speciesA_list1, speciesA_list2, speciesB_list = GetOrtholog(args.anchors, args.chromosome1, args.chromosome2, args.chromosome3)

def WriteSpeciesA(inputlist, outname):
    with open(outname, "w") as output:
        for x in inputlist:
            output.write(x[0] + "\n")
    output.close()
def WriteSpeciesB(inputlist, outname):
    with open(outname, "w") as output:
        for x in inputlist:
            output.write(x + "\n")
    output.close()

WriteSpeciesA(speciesA_list1, args.output1)
WriteSpeciesA(speciesA_list2, args.output2)
WriteSpeciesB(speciesB_list, args.output3)