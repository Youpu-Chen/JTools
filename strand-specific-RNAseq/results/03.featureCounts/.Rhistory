names(goOnt) <- goOnt.df[,1]
assign("GO2ONT", goOnt, envir=GO_DATA)
return(GO_DATA)
}
get_GO_Env <- function () {
if (!exists(".GO_clusterProfiler_Env", envir = .GlobalEnv)) {
pos <- 1
envir <- as.environment(pos)
assign(".GO_clusterProfiler_Env", new.env(), envir=envir)
}
get(".GO_clusterProfiler_Env", envir = .GlobalEnv)
}
get_GO2TERM_table <- function() {
GOTERM.df <- get_GOTERM()
GOTERM.df[, c("go_id", "Term")] %>% unique
}
get_GOTERM <- function() {
pos <- 1
envir <- as.environment(pos)
if (!exists(".GOTERM_Env", envir=envir)) {
assign(".GOTERM_Env", new.env(), envir)
}
GOTERM_Env <- get(".GOTERM_Env", envir = envir)
if (exists("GOTERM.df", envir = GOTERM_Env)) {
GOTERM.df <- get("GOTERM.df", envir=GOTERM_Env)
} else {
GOTERM.df <- toTable(GOTERM)
assign("GOTERM.df", GOTERM.df, envir = GOTERM_Env)
}
return(GOTERM.df)
}
library(DOSE)
library(GOSemSim)
GO_DATA <- get_GO_data("org.Sc.sgd.db", "BP", "ENSEMBL")
BP.peptide_metabolic_process <- names(GO_DATA$PATHID2NAME[grep("peptide metabolic process", GO_DATA$PATHID2NAME)])
ENSEMBL.BP.peptide_metabolic_process <- unique(unlist(GO_DATA$PATHID2EXTID[ BP.peptide_metabolic_process ]))
counts$Geneid[1:500] %in% ENSEMBL.BP.peptide_metabolic_process
counts$Geneid[1:500][ counts$Geneid[1:500] %in% ENSEMBL.BP.peptide_metabolic_process ]
geneset1 <- counts$Geneid[1:500][ counts$Geneid[1:500] %in% ENSEMBL.BP.peptide_metabolic_process ]
geneset1
geneset1 <- counts$Geneid[1:500][ counts$Geneid[1:500] == ENSEMBL.BP.peptide_metabolic_process ]
geneset1 <- counts$Geneid[1:500][ counts$Geneid[1:500] %in% ENSEMBL.BP.peptide_metabolic_process ]
geneset1 <- counts$Geneid[1:500][ ENSEMBL.BP.peptide_metabolic_process %in% counts$Geneid[1:500] ]
ENSEMBL.BP.peptide_metabolic_process
geneset1 <- ENSEMBL.BP.peptide_metabolic_process[ ENSEMBL.BP.peptide_metabolic_process %in% counts$Geneid[1:500] ]
geneset1
length(geneset1)
geneset1 <- counts$Geneid[1:500][ counts$Geneid[1:500] %in% ENSEMBL.BP.peptide_metabolic_process ]
GO.BP.dat <- get_GO_data("org.Sc.sgd.db", "BP", "ENSEMBL")
# peptide metabolic process
BP.peptide_metabolic_process <- names(GO.BP.dat$PATHID2NAME[grep("peptide metabolic process", GO.BP.dat$PATHID2NAME)])
ENSEMBL.BP.peptide_metabolic_process <- unique(unlist(GO.BP.dat$PATHID2EXTID[ BP.peptide_metabolic_process ]))
counts$Geneid[1:500] %in% ENSEMBL.BP.peptide_metabolic_process
geneset1 <- counts$Geneid[1:500][ counts$Geneid[1:500] %in% ENSEMBL.BP.peptide_metabolic_process ]
# peptide biosynthetic process
BP.peptide_biosynthetic_process <- names(GO.BP.dat$PATHID2NAME[grep("peptide biosynthetic process", GO.BP.dat$PATHID2NAME)])
ENSEMBL.BP.peptide_biosynthetic_process <- unique(unlist(GO.BP.dat$PATHID2EXTID[ BP.peptide_biosynthetic_process ]))
counts$Geneid[1:500] %in% ENSEMBL.BP.peptide_metabolic_process
counts$Geneid[1:500] %in% ENSEMBL.BP.peptide_biosynthetic_process
# counts$Geneid[1:500] %in% ENSEMBL.BP.peptide_biosynthetic_process
geneset2 <- counts$Geneid[1:500][ counts$Geneid[1:500] %in% ENSEMBL.BP.peptide_biosynthetic_process ]
source("C:/Users/Hongpu Chen/Desktop/复旦生活/课程学习/基因组学与生物信息学/workspace/期末大作业/results/03.featureCounts/norm.R", echo=TRUE)
length(geneset2)
length(geneset2)
# counts$Geneid[1:500] %in% ENSEMBL.BP.peptide_biosynthetic_process
geneset2 <- counts$Geneid[1:500][ counts$Geneid[1:500] %in% ENSEMBL.BP.peptide_biosynthetic_process ]
# ------------------------------------------------------------------------------
# Description: Transform single sample read counts to RPKM and filtering analysis
# for GO enrichment analysis
# Date: 2022-12-18
# ------------------------------------------------------------------------------
rm(list=ls())
options(stringsAsFactors = F)
# load data
counts <- read.delim('rna.mat', comment.char = '#', header = TRUE, sep = '\t')
names(counts)[7] <- "S1"
head(counts)
# RPKM
total.reads <- sum(counts[, 7])
rpkm.line <- function(line){
return( as.numeric(line[7])/( as.numeric(line[6])/1000 * total.reads/1000000) )
}
counts$rpkm <- apply(counts, MARGIN = 1, FUN = rpkm.line)
head(counts)
# retrieve the top 500 level of genes
counts <- counts[order(counts$rpkm, decreasing = TRUE), ]
head(counts)
counts$Geneid[1:500]
if(F){
test.vector <- as.vector(counts$Chr[1:500])
selectOne <- function(value) {
strsplit(value, split = ';')[[1]][1]
}
test.df <- data.frame(table(unlist(lapply(test.vector, FUN = selectOne))))
test.df <- test.df[order(test.df$Freq, decreasing = TRUE), ]
head(test.df)
# Var1 Freq
# 4    chrIV   74
# 12  chrXII   58
# 8   chrVII   52
}
strsplit(test.vector[450], split = ';')[[1]][1]
strsplit(test.vector[450], split = ';')[[1]][1]
# ------------------------------------------------------------------------------
# Description: Transform single sample read counts to RPKM and filtering analysis
# for GO enrichment analysis
# Date: 2022-12-18
# ------------------------------------------------------------------------------
rm(list=ls())
options(stringsAsFactors = F)
# load data
counts <- read.delim('rna.mat', comment.char = '#', header = TRUE, sep = '\t')
names(counts)[7] <- "S1"
head(counts)
# RPKM
total.reads <- sum(counts[, 7])
rpkm.line <- function(line){
return( as.numeric(line[7])/( as.numeric(line[6])/1000 * total.reads/1000000) )
}
counts$rpkm <- apply(counts, MARGIN = 1, FUN = rpkm.line)
head(counts)
# retrieve the top 500 level of genes
counts <- counts[order(counts$rpkm, decreasing = TRUE), ]
head(counts)
counts$Geneid[1:500]
if(F){
test.vector <- as.vector(counts$Chr[1:500])
selectOne <- function(value) {
strsplit(value, split = ';')[[1]][1]
}
test.df <- data.frame(table(unlist(lapply(test.vector, FUN = selectOne))))
test.df <- test.df[order(test.df$Freq, decreasing = TRUE), ]
head(test.df)
# Var1 Freq
# 4    chrIV   74
# 12  chrXII   58
# 8   chrVII   52
}
test.vector <- as.vector(counts$Chr[1:500])
selectOne <- function(value) {
strsplit(value, split = ';')[[1]][1]
}
test.df <- data.frame(table(unlist(lapply(test.vector, FUN = selectOne))))
test.df <- test.df[order(test.df$Freq, decreasing = TRUE), ]
head(test.df)
# enrichment analysis
# BiocManager::install("org.Sc.sgd.db")
library(org.Sc.sgd.db)
library(clusterProfiler)
library(ggplot2)
# GO
ego <- enrichGO(gene = counts$Geneid[1:500],
OrgDb = org.Sc.sgd.db,
ont = "all",
pAdjustMethod = "BH",
minGSSize = 10,
pvalueCutoff = 0.05,
keyType='ENSEMBL')
p1 <- barplot(ego, showCategory = 10)
p1
p2 <- dotplot(ego, showCategory = 10)
p2
# KEGG
ekegg <- enrichKEGG(gene = counts$Geneid[1:500],
organism = 'sce',
pAdjustMethod = "BH",
minGSSize = 10,
pvalueCutoff = 0.05,
keyType='kegg')
p3 <- emapplot(ekegg, showCategory = 20)
p3
### top3 GO functions
library(tidyverse)
library(DOSE)
library(GOSemSim)
if(F){
# required functions
get_GO_data <- function(OrgDb, ont, keytype) {
GO_Env <- get_GO_Env()
use_cached <- FALSE
if (exists("organism", envir=GO_Env, inherits=FALSE) &&
exists("keytype", envir=GO_Env, inherits=FALSE)) {
org <- get("organism", envir=GO_Env)
kt <- get("keytype", envir=GO_Env)
if (org == DOSE:::get_organism(OrgDb) &&
keytype == kt &&
exists("goAnno", envir=GO_Env, inherits=FALSE)) {
## https://github.com/GuangchuangYu/clusterProfiler/issues/182
## && exists("GO2TERM", envir=GO_Env, inherits=FALSE)){
use_cached <- TRUE
}
}
if (use_cached) {
goAnno <- get("goAnno", envir=GO_Env)
} else {
OrgDb <- GOSemSim:::load_OrgDb(OrgDb)
kt <- keytypes(OrgDb)
if (! keytype %in% kt) {
stop("keytype is not supported...")
}
kk <- keys(OrgDb, keytype=keytype)
goAnno <- suppressMessages(
AnnotationDbi::select(OrgDb, keys=kk, keytype=keytype,
columns=c("GOALL", "ONTOLOGYALL")))
goAnno <- unique(goAnno[!is.na(goAnno$GOALL), ])
assign("goAnno", goAnno, envir=GO_Env)
assign("keytype", keytype, envir=GO_Env)
assign("organism", DOSE:::get_organism(OrgDb), envir=GO_Env)
}
if (ont == "ALL") {
GO2GENE <- unique(goAnno[, c(2,1)])
} else {
GO2GENE <- unique(goAnno[goAnno$ONTOLOGYALL == ont, c(2,1)])
}
GO_DATA <- DOSE:::build_Anno(GO2GENE, get_GO2TERM_table())
goOnt.df <- goAnno[, c("GOALL", "ONTOLOGYALL")] %>% unique
goOnt <- goOnt.df[,2]
names(goOnt) <- goOnt.df[,1]
assign("GO2ONT", goOnt, envir=GO_DATA)
return(GO_DATA)
}
get_GO_Env <- function () {
if (!exists(".GO_clusterProfiler_Env", envir = .GlobalEnv)) {
pos <- 1
envir <- as.environment(pos)
assign(".GO_clusterProfiler_Env", new.env(), envir=envir)
}
get(".GO_clusterProfiler_Env", envir = .GlobalEnv)
}
get_GO2TERM_table <- function() {
GOTERM.df <- get_GOTERM()
GOTERM.df[, c("go_id", "Term")] %>% unique
}
get_GOTERM <- function() {
pos <- 1
envir <- as.environment(pos)
if (!exists(".GOTERM_Env", envir=envir)) {
assign(".GOTERM_Env", new.env(), envir)
}
GOTERM_Env <- get(".GOTERM_Env", envir = envir)
if (exists("GOTERM.df", envir = GOTERM_Env)) {
GOTERM.df <- get("GOTERM.df", envir=GOTERM_Env)
} else {
GOTERM.df <- toTable(GOTERM)
assign("GOTERM.df", GOTERM.df, envir = GOTERM_Env)
}
return(GOTERM.df)
}
}
# required functions
get_GO_data <- function(OrgDb, ont, keytype) {
GO_Env <- get_GO_Env()
use_cached <- FALSE
if (exists("organism", envir=GO_Env, inherits=FALSE) &&
exists("keytype", envir=GO_Env, inherits=FALSE)) {
org <- get("organism", envir=GO_Env)
kt <- get("keytype", envir=GO_Env)
if (org == DOSE:::get_organism(OrgDb) &&
keytype == kt &&
exists("goAnno", envir=GO_Env, inherits=FALSE)) {
## https://github.com/GuangchuangYu/clusterProfiler/issues/182
## && exists("GO2TERM", envir=GO_Env, inherits=FALSE)){
use_cached <- TRUE
}
}
if (use_cached) {
goAnno <- get("goAnno", envir=GO_Env)
} else {
OrgDb <- GOSemSim:::load_OrgDb(OrgDb)
kt <- keytypes(OrgDb)
if (! keytype %in% kt) {
stop("keytype is not supported...")
}
kk <- keys(OrgDb, keytype=keytype)
goAnno <- suppressMessages(
AnnotationDbi::select(OrgDb, keys=kk, keytype=keytype,
columns=c("GOALL", "ONTOLOGYALL")))
goAnno <- unique(goAnno[!is.na(goAnno$GOALL), ])
assign("goAnno", goAnno, envir=GO_Env)
assign("keytype", keytype, envir=GO_Env)
assign("organism", DOSE:::get_organism(OrgDb), envir=GO_Env)
}
if (ont == "ALL") {
GO2GENE <- unique(goAnno[, c(2,1)])
} else {
GO2GENE <- unique(goAnno[goAnno$ONTOLOGYALL == ont, c(2,1)])
}
GO_DATA <- DOSE:::build_Anno(GO2GENE, get_GO2TERM_table())
goOnt.df <- goAnno[, c("GOALL", "ONTOLOGYALL")] %>% unique
goOnt <- goOnt.df[,2]
names(goOnt) <- goOnt.df[,1]
assign("GO2ONT", goOnt, envir=GO_DATA)
return(GO_DATA)
}
get_GO_Env <- function () {
if (!exists(".GO_clusterProfiler_Env", envir = .GlobalEnv)) {
pos <- 1
envir <- as.environment(pos)
assign(".GO_clusterProfiler_Env", new.env(), envir=envir)
}
get(".GO_clusterProfiler_Env", envir = .GlobalEnv)
}
get_GO2TERM_table <- function() {
GOTERM.df <- get_GOTERM()
GOTERM.df[, c("go_id", "Term")] %>% unique
}
get_GOTERM <- function() {
pos <- 1
envir <- as.environment(pos)
if (!exists(".GOTERM_Env", envir=envir)) {
assign(".GOTERM_Env", new.env(), envir)
}
GOTERM_Env <- get(".GOTERM_Env", envir = envir)
if (exists("GOTERM.df", envir = GOTERM_Env)) {
GOTERM.df <- get("GOTERM.df", envir=GOTERM_Env)
} else {
GOTERM.df <- toTable(GOTERM)
assign("GOTERM.df", GOTERM.df, envir = GOTERM_Env)
}
return(GOTERM.df)
}
GO.BP.dat <- get_GO_data("org.Sc.sgd.db", "BP", "ENSEMBL")
# peptide metabolic process
BP.peptide_metabolic_process <- names(GO.BP.dat$PATHID2NAME[grep("peptide metabolic process", GO.BP.dat$PATHID2NAME)])
ENSEMBL.BP.peptide_metabolic_process <- unique(unlist(GO.BP.dat$PATHID2EXTID[ BP.peptide_metabolic_process ]))
# counts$Geneid[1:500] %in% ENSEMBL.BP.peptide_metabolic_process
geneset1 <- counts$Geneid[1:500][ counts$Geneid[1:500] %in% ENSEMBL.BP.peptide_metabolic_process ]
# peptide biosynthetic process
BP.peptide_biosynthetic_process <- names(GO.BP.dat$PATHID2NAME[grep("peptide biosynthetic process", GO.BP.dat$PATHID2NAME)])
ENSEMBL.BP.peptide_biosynthetic_process <- unique(unlist(GO.BP.dat$PATHID2EXTID[ BP.peptide_biosynthetic_process ]))
# counts$Geneid[1:500] %in% ENSEMBL.BP.peptide_biosynthetic_process
geneset2 <- counts$Geneid[1:500][ counts$Geneid[1:500] %in% ENSEMBL.BP.peptide_biosynthetic_process ]
### translation
GO.MF.dat <- get_GO_data("org.Sc.sgd.db", "MF", "ENSEMBL")
MF.translation <- names(GO.MF.dat$PATHID2NAME[grep("translation", GO.MF.dat$PATHID2NAME)])
ENSEMBL.MF.translation <- unique(unlist(GO.MF.dat$PATHID2EXTID[ MF.translation ]))
geneset3 <- counts$Geneid[1:500][ counts$Geneid[1:500] %in% ENSEMBL.MF.translation ]
MF.translation
ENSEMBL.MF.translation
geneset3 <- counts$Geneid[1:500][ counts$Geneid[1:500] %in% ENSEMBL.MF.translation ]
# test
GO.CC.dat <- get_GO_data("org.Sc.sgd.db", "CC", "ENSEMBL")
CC.translation <- names(GO.CC.dat$PATHID2NAME[grep("translation", GO.CC.dat$PATHID2NAME)])
ENSEMBL.CC.translation <- unique(unlist(GO.CC.dat$PATHID2EXTID[ CC.translation ]))
geneset3 <- counts$Geneid[1:500][ counts$Geneid[1:500] %in% ENSEMBL.CC.translation ]
# test
GO.MF.dat <- get_GO_data("org.Sc.sgd.db", "MF", "ENSEMBL")
# test
test.GO.dat <- get_GO_data("org.Sc.sgd.db", "BP", "ENSEMBL")
test.func <- names(test.GO.dat$PATHID2NAME[grep("translation", test.GO.dat$PATHID2NAME)])
ENSEMBL.test.func <- unique(unlist(test.GO.dat$PATHID2EXTID[ test.func ]))
geneset3 <- counts$Geneid[1:500][ counts$Geneid[1:500] %in% ENSEMBL.CC.translation ]
### translation
BP.translation <- names(GO.BP.dat$PATHID2NAME[grep("translation", GO.BP.dat$PATHID2NAME)])
ENSEMBL.BP.translation <- unique(unlist(GO.BP.dat$PATHID2EXTID[ BP.translation ]))
geneset3 <- counts$Geneid[1:500][ counts$Geneid[1:500] %in% ENSEMBL.BP.translation ]
ENSEMBL.BP.translation
### translation
BP.translation <- names(GO.BP.dat$PATHID2NAME[grep("^translation", GO.BP.dat$PATHID2NAME)])
ENSEMBL.BP.translation <- unique(unlist(GO.BP.dat$PATHID2EXTID[ BP.translation ]))
geneset3 <- counts$Geneid[1:500][ counts$Geneid[1:500] %in% ENSEMBL.BP.translation ]
#
head(counts)
geneset3 <- counts$Geneid[1:500, c(1,2)][ counts$Geneid[1:500] %in% ENSEMBL.BP.translation ]
geneset3 <- counts[1:500, c(1,2)][ counts$Geneid[1:500] %in% ENSEMBL.BP.translation ]
geneset3 <- counts[1:500, c(1,2)][ counts$Geneid[1:500] %in% ENSEMBL.BP.translation, ]
head(geneset3)
# counts$Geneid[1:500] %in% ENSEMBL.BP.peptide_biosynthetic_process
geneset2 <- counts[1:500, c(1,2)][ counts$Geneid[1:500] %in% ENSEMBL.BP.peptide_biosynthetic_process, ]
# counts$Geneid[1:500] %in% ENSEMBL.BP.peptide_metabolic_process
geneset2 <- counts[1:500, c(1,2)][ counts$Geneid[1:500] %in% ENSEMBL.BP.peptide_metabolic_process, ]
# counts$Geneid[1:500] %in% ENSEMBL.BP.peptide_metabolic_process
geneset1 <- counts[1:500, c(1,2)][ counts$Geneid[1:500] %in% ENSEMBL.BP.peptide_metabolic_process, ]
# counts$Geneid[1:500] %in% ENSEMBL.BP.peptide_biosynthetic_process
geneset2 <- counts[1:500, c(1,2)][ counts$Geneid[1:500] %in% ENSEMBL.BP.peptide_biosynthetic_process, ]
#
unique(geneset1$Geneid)
#
unique(geneset1$Chr)
#
table(geneset1$Chr)
#
table(selectOne(geneset1$Chr))
#
selectOne(geneset1$Chr)
#
selectOne(as.vector(geneset1$Chr))
#
lapply(geneset1$Chr, FUN = selectOne)
#
unlist(lapply(geneset1$Chr, FUN = selectOne))
#
table(unlist(lapply(geneset1$Chr, FUN = selectOne)))
#
which.max(table(unlist(lapply(geneset1$Chr, FUN = selectOne))))
#
which.max(as.table(unlist(lapply(geneset1$Chr, FUN = selectOne))))
#
which.max(data.frame(table(unlist(lapply(geneset1$Chr, FUN = selectOne)))))
data.frame(table(unlist(lapply(geneset1$Chr, FUN = selectOne))))
#
which.max(table(unlist(lapply(geneset1$Chr, FUN = selectOne))))
table(unlist(lapply(geneset1$Chr, FUN = selectOne)))
#
which.max(table(unlist(lapply(geneset1$Chr, FUN = selectOne))))
which.max(table(unlist(lapply(geneset2$Chr, FUN = selectOne))))
geneset2
table(unlist(lapply(geneset2$Chr, FUN = selectOne)))
which.max(table(unlist(lapply(geneset2$Chr, FUN = selectOne))))
which.max(table(unlist(lapply(geneset3$Chr, FUN = selectOne))))
table(unlist(lapply(geneset3$Chr, FUN = selectOne)))
geneset1$Chr == "chrIV"
geneset1[, geneset1$Chr == "chrIV"]
geneset1[geneset1$Chr == "chrIV", ]
geneset2[geneset1$Chr == "chrIV", ]
geneset3[geneset1$Chr == "chrIV", ]
geneset2[geneset1$Chr == "chrIV", ]
geneset3[geneset1$Chr == "chrIV", ]
geneset1[geneset1$Chr == "chrIV", ]
geneset2[geneset1$Chr == "chrIV", ]
unique(geneset1[geneset1$Chr == "chrIV", 1],
geneset2[geneset1$Chr == "chrIV", 1],
geneset3[geneset1$Chr == "chrIV", 1])
geneset1[geneset1$Chr == "chrIV", 1]
unique(c(geneset1[geneset1$Chr == "chrIV", 1],
geneset2[geneset1$Chr == "chrIV", 1],
geneset3[geneset1$Chr == "chrIV", 1]
))
geneset1[geneset1$Chr == "chrIV", 1]
geneset1[geneset1$Chr == "chrIV", ]
unlist(lapply(geneset1$Chr, FUN = selectOne))
table(unlist(lapply(geneset1$Chr, FUN = selectOne)))
View(geneset1)
geneset1[(geneset1$Chr == "chrIV" | geneset1$Chr == "chrIV;chrIV"), ]
geneset1[(geneset1$Chr == "chrIV" | geneset1$Chr == "chrIV;chrIV"), ]
geneset2[(geneset2$Chr == "chrIV" | geneset2$Chr == "chrIV;chrIV"), ]
geneset3[(geneset3$Chr == "chrIV" | geneset3$Chr == "chrIV;chrIV"), ]
geneset1.chrIV <- geneset1[(geneset1$Chr == "chrIV" | geneset1$Chr == "chrIV;chrIV"), ]
geneset2.chrIV <- geneset2[(geneset2$Chr == "chrIV" | geneset2$Chr == "chrIV;chrIV"), ]
geneset3.chrIV <- geneset3[(geneset3$Chr == "chrIV" | geneset3$Chr == "chrIV;chrIV"), ]
geneset1.chrIV <- geneset1[(geneset1$Chr == "chrIV" | geneset1$Chr == "chrIV;chrIV"), 1]
geneset2.chrIV <- geneset2[(geneset2$Chr == "chrIV" | geneset2$Chr == "chrIV;chrIV"), 1]
geneset3.chrIV <- geneset3[(geneset3$Chr == "chrIV" | geneset3$Chr == "chrIV;chrIV"), 1]
unique(geneset1.chrIV, geneset2.chrIV, geneset3.chrIV)
unique(c(geneset1.chrIV, geneset2.chrIV, geneset3.chrIV))
geneset1.chrIV <- geneset1[("chrXII" %in% geneset1$Chr), 1]
### core gene set
geneset1.chrIV <- geneset1[(geneset1$Chr == "chrIV" | geneset1$Chr == "chrIV;chrIV"), 1]
geneset2.chrXII <- geneset2[("chrXII" %in% geneset2$Chr), 1]
geneset3.chrXII <- geneset3[("chrXII" %in% geneset3$Chr), 1]
unique(c(geneset1.chrXII, geneset2.chrXII, geneset3.chrXII))
geneset3.chrXII <- geneset3[("chrXII" %in% geneset3$Chr), 1]
unique(c(geneset1.chrXII, geneset2.chrXII, geneset3.chrXII))
geneset1.chrXII <- geneset1[("chrXII" %in% geneset1$Chr), 1]
geneset2.chrXII <- geneset2[("chrXII" %in% geneset2$Chr), 1]
geneset3.chrXII <- geneset3[("chrXII" %in% geneset3$Chr), 1]
unique(c(geneset1.chrXII, geneset2.chrXII, geneset3.chrXII))
geneset1[("chrXII" %in% geneset1$Chr), 1]
geneset1.chrXII <- geneset1["chrXII" %in% geneset1$Chr, 1]
geneset1.chrXII
"chrXII" %in% geneset1$Chr
geneset1.chrXII <- geneset1[(geneset1$Chr == "chrXII" |
geneset1$Chr == "chrXII;chrXII" |
geneset1$Chr == "chrXII;chrXII;chrXII"), 1]
geneset2.chrXII <- geneset2[(geneset2$Chr == "chrXII" |
geneset2$Chr == "chrXII;chrXII" |
geneset2$Chr == "chrXII;chrXII;chrXII"), 1]
geneset3.chrXII <- geneset3[(geneset3$Chr == "chrXII" |
geneset3$Chr == "chrXII;chrXII" |
geneset3$Chr == "chrXII;chrXII;chrXII"), 1]
unique(c(geneset1.chrXII, geneset2.chrXII, geneset3.chrXII))
geneset1.name <- unique(c(geneset1.chrIV, geneset2.chrIV, geneset3.chrIV))
#
geneset1.chrVII <- geneset1[(geneset1$Chr == "chrVII" |
geneset1$Chr == "chrVII;chrVII" |
geneset1$Chr == "chrVII;chrVII;chrVII"), 1]
geneset2.chrVII <- geneset2[(geneset2$Chr == "chrVII" |
geneset2$Chr == "chrVII;chrVII" |
geneset2$Chr == "chrVII;chrVII;chrVII"), 1]
geneset3.chrVII <- geneset3[(geneset3$Chr == "chrVII" |
geneset3$Chr == "chrVII;chrVII" |
geneset3$Chr == "chrVII;chrVII;chrVII"), 1]
chrIV.name <- unique(c(geneset1.chrIV, geneset2.chrIV, geneset3.chrIV))
chrXII.name <- unique(c(geneset1.chrXII, geneset2.chrXII, geneset3.chrXII))
chrVII.name <- unique(c(geneset1.chrVII, geneset2.chrVII, geneset3.chrVII))
chrVII.name
View(counts)
?aggregate
### test
aggregate(counts$rpkm, by='Chr', sum)
### test
aggregate(counts$rpkm, by=list('Chr'), sum)
### test
aggregate(counts$rpkm, by=list(Chr), FUN =sum, data=counts)
### test
aggregate(counts$rpkm~counts$Chr, FUN =sum)
### test
which.min(aggregate(counts$rpkm~counts$Chr, FUN =sum))
# acid
BP.acid <- names(GO.BP.dat$PATHID2NAME[grep("carboxylic acid biosynthetic process", GO.BP.dat$PATHID2NAME)])
ENSEMBL.BP.acid <- unique(unlist(GO.BP.dat$PATHID2EXTID[ BP.acid ]))
geneset.acid <- counts[1:500, c(1,2)][ counts$Geneid[1:500] %in% ENSEMBL.BP.acid, ]
head(geneset3)
# acid
BP.acid <- names(GO.BP.dat$PATHID2NAME[grep("carboxylic acid biosynthetic process", GO.BP.dat$PATHID2NAME)])
ENSEMBL.BP.acid <- unique(unlist(GO.BP.dat$PATHID2EXTID[ BP.acid ]))
geneset.acid <- counts[1:500, c(1,2)][ counts$Geneid[1:500] %in% ENSEMBL.BP.acid, ]
head(geneset3)
head(geneset.acid)
geneset.acid
write.csv(geneset.acid, 'acid-related-gene.csv', quote = F, row.names = F, col.names = F)
write.csv(geneset.acid, 'acid-related-gene.csv', quote = F, row.names = F)
